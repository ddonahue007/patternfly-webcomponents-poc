import settings from 'carbon-components/es/globals/js/settings';
import { html, property, customElement, LitElement } from 'lit-element';
import ChevronDown20 from '@carbon/icons/lib/chevron--down/20';
import { filter, forEach } from '../../globals/internal/collection-helpers';
import styles from './side-nav.scss';

const { prefix } = settings;

/**
 * Side nav menu.
 */
@customElement(`${prefix}-side-nav-menu`)
class BXSideNavMenu extends LitElement {
  /**
   * @param item A menu item.
   * @returns `true` if the given menu item is active.
   */
  private isMenuItemActive(item: Node) {
    return (
      typeof (item as Element).matches === 'function' &&
      (item as Element).matches((this.constructor as typeof BXSideNavMenu).selectorItemActive)
    );
  }

  /**
   * `true` if this menu has an icon.
   */
  private _hasIcon = false;

  /**
   * Handles `click` event on the expando button.
   */
  private _handleClickExpando() {
    this.expanded = !this.expanded;
  }

  /**
   * Handles `slotchange` event on the non-named `<slot>`.
   */
  private _handleSlotChange({ target }) {
    const { _hasIcon: hasIcon } = this;
    forEach(target.assignedNodes(), item => {
      item.toggleAttribute((this.constructor as typeof BXSideNavMenu).attribItemHasIcon, hasIcon);
    });
    this.active = filter(target.assignedNodes(), this.isMenuItemActive, this).length > 0;
  }

  /**
   * Handles `slotchange` event on the `<slot>` for the title icon.
   */
  private _handleSlotChangeTitleIcon({ target }) {
    const constructor = this.constructor as typeof BXSideNavMenu;
    const hasIcon = target.assignedNodes().length > 0;
    this._hasIcon = hasIcon;
    this.shadowRoot!.getElementById('title-icon-container')!.toggleAttribute('hidden', !hasIcon);
    forEach(this.querySelectorAll(constructor.selectorItem), item => {
      item.toggleAttribute(constructor.attribItemHasIcon, hasIcon);
    });
  }

  /**
   * `true` if the menu has active menu item. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  active = false;

  /**
   * `true` if the menu should be open. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  expanded = false;

  /**
   * The title text. Corresponds to the attribute with the same name.
   */
  @property()
  title = '';

  connectedCallback() {
    if (!this.hasAttribute('role')) {
      this.setAttribute('role', 'listitem');
    }
    super.connectedCallback();
  }

  render() {
    const {
      expanded,
      title,
      _handleClickExpando: handleClickExpando,
      _handleSlotChange: handleSlotChange,
      _handleSlotChangeTitleIcon: handleSlotChangeTitleIcon,
    } = this;
    return html`
      <button
        type="button"
        aria-haspopup="true"
        aria-expanded="${String(Boolean(expanded))}"
        class="${prefix}--side-nav__submenu"
        @click=${handleClickExpando}
      >
        <div id="title-icon-container" hidden class="${prefix}--side-nav__icon">
          <slot name="title-icon" @slotchange=${handleSlotChangeTitleIcon}></slot>
        </div>
        <span class="${prefix}--side-nav__submenu-title">${title}</span>
        <div class="${prefix}--side-nav__icon ${prefix}--side-nav__icon--small ${prefix}--side-nav__submenu-chevron">
          ${ChevronDown20()}
        </div>
      </button>
      <ul class="${prefix}--side-nav__menu" role="menu">
        <slot @slotchange=${handleSlotChange}></slot>
      </ul>
    `;
  }

  /**
   * The attribute name of the menu items, that is set if this menu has an icon.
   */
  static attribItemHasIcon = 'parent-has-icon';

  /**
   * A selector that will return the menu items.
   */
  static get selectorItem() {
    return `${prefix}-side-nav-menu-item`;
  }

  /**
   * A selector that will return active menu items.
   */
  static get selectorItemActive() {
    return `${prefix}-side-nav-menu-item[active]`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXSideNavMenu;
