import settings from 'carbon-components/es/globals/js/settings';
import { html, property, customElement } from 'lit-element';
import BXFloatingMenu, { FLOATING_MENU_ALIGNMENT, FLOATING_MENU_DIRECTION } from '../floating-menu/floating-menu';
import styles from './tooltip.scss';

const { prefix } = settings;

/**
 * Tooltip body.
 */
@customElement(`${prefix}-tooltip-body`)
class BXTooltipBody extends BXFloatingMenu {
  /**
   * How the menu is aligned to the trigger button. Corresponds to the attribute with the same name.
   */
  @property()
  alignment = FLOATING_MENU_ALIGNMENT.CENTER;

  /**
   * The menu direction. Corresponds to the attribute with the same name.
   */
  @property()
  direction = FLOATING_MENU_DIRECTION.BOTTOM;

  /**
   * `true` if the dropdown should be open. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  open = false;

  /**
   * The position of this tooltip body.
   */
  get position() {
    const { direction } = this;
    const position = super.position;

    if (direction === FLOATING_MENU_DIRECTION.LEFT) {
      const style = this.ownerDocument!.defaultView!.getComputedStyle(this);
      const margin = Number((/^([\d-.]+)px$/.exec(style.getPropertyValue('margin-right')) || [])[1]);
      if (!isNaN(margin)) {
        // For direction === DIRECTION_RIGHT, the left/top margin the caret size effectively adjusts the position,
        // but for direction === DIRECTION_LEFT such thing won't happen
        return {
          ...position,
          left: position.left - margin,
        };
      }
    }

    if (direction === FLOATING_MENU_DIRECTION.TOP) {
      const style = this.ownerDocument!.defaultView!.getComputedStyle(this);
      const margin = Number((/^([\d-.]+)px$/.exec(style.getPropertyValue('margin-bottom')) || [])[1]);
      if (!isNaN(margin)) {
        // For direction === DIRECTION_BOTTOM, the left/top margin the caret size effectively adjusts the position,
        // but for direction === DIRECTION_TOP such thing won't happen
        return {
          ...position,
          top: position.top - margin,
        };
      }
    }

    return position;
  }

  connectedCallback() {
    if (!this.hasAttribute('role')) {
      this.setAttribute('role', 'menu');
    }
    if (!this.hasAttribute('tabindex')) {
      // TODO: Should we use a property?
      this.setAttribute('tabindex', '-1');
    }
    super.connectedCallback();
  }

  render() {
    return html`
      <span class="${prefix}--tooltip__caret"></span><slot></slot>
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXTooltipBody;
