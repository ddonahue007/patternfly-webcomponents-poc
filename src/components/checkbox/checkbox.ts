import classnames from 'classnames';
import { ifDefined } from 'lit-html/directives/if-defined';
import { html, property, query, customElement, LitElement } from 'lit-element';
import settings from 'carbon-components/es/globals/js/settings';
import styles from './checkbox.scss';

const { prefix } = settings;

/**
 * Check box.
 */
@customElement(`${prefix}-checkbox`)
class BXCheckbox extends LitElement {
  @query('input')
  _checkboxNode!: HTMLInputElement;

  /**
   * Unique ID used for ID refs.
   */
  protected _uniqueId = Math.random()
    .toString(36)
    .slice(2);

  /**
   * The element ID for the check box.
   */
  protected get _checkboxId() {
    const { id: elementId, _uniqueId: uniqueId } = this;
    return `__bx-ce-selectable-tile_${elementId || uniqueId}`;
  }

  /**
   * Handles `click` event on the `<input>` in the shadow DOM.
   */
  private _handleChange() {
    const { checked, indeterminate } = this._checkboxNode;
    this.checked = checked;
    this.indeterminate = indeterminate;
  }

  /**
   * `true` if the check box should be checked. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  checked = false;

  /**
   * `true` if the check box should be disabled. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  disabled = false;

  /**
   * `true` if the label should be hidden. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true, attribute: 'hide-label' })
  hideLabel = false;

  /**
   * `true` if the check box should show its UI of the indeterminate state. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  indeterminate = false;

  /**
   * The label text. Corresponds to `label-text` attribute.
   */
  @property({ attribute: 'label-text' })
  labelText = '';

  /**
   * The form name. Corresponds to the attribute with the same name.
   */
  @property()
  name!: string;

  /**
   * The value. Corresponds to the attribute with the same name.
   */
  @property({ type: String })
  value!: string;

  createRenderRoot() {
    return this.attachShadow({ mode: 'open', delegatesFocus: true });
  }

  render() {
    const {
      checked,
      disabled,
      hideLabel,
      indeterminate,
      labelText,
      name,
      value,
      _checkboxId: checkboxId,
      _handleChange: handleChange,
    } = this;
    const labelClasses = classnames(`${prefix}--checkbox-label`, {
      [`${prefix}--visually-hidden`]: hideLabel,
    });
    return html`
      <input
        id="${checkboxId}"
        type="checkbox"
        class="${`${prefix}--checkbox`}"
        aria-checked="${indeterminate ? 'mixed' : String(Boolean(checked))}"
        .checked="${checked}"
        ?disabled="${disabled}"
        .indeterminate="${indeterminate}"
        name="${ifDefined(name == null ? undefined : name)}"
        value="${ifDefined(value == null ? undefined : value)}"
        @change="${handleChange}"
      />
      <label for="${checkboxId}" class="${labelClasses}">${labelText}</label>
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXCheckbox;
